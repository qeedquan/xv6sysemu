A toy xv6 syscall emulator, emulates the system calls of xv6.
The program currently only supports running under 32/64 bit x86 Linux.

This is not a sandboxed emulator, so the executable can do anything
once it is loaded.

It has been made to support the binaries generated by the two projects below

32 bit xv6 - 32 bit version made by MIT for their OS class
https://github.com/mit-pdos/xv6-public

64 bit xv6 - 64 bit version of xv6 ported by Brian Swetland
https://github.com/swetland/xv6

The 32 bit binaries must be ran under 32 bit mode, either a 32 bit 
environment or a 64 bit environment running under 32 bit compat mode.

For 64 bit running under 32 bit compatibility mode, the kernel must have
COMPAT_BINFMT_ELF=y
and a 32 bit glibc multilib.

The 64 bit binaries must be ran under 64 bit mode.

xv6 loads the program at address 0x0. Usually the OS don't 
want you map this address because it wants dereferences to NULL pointers 
to cause a segfault. If you are running as a regular user, 
trying to mmap at this address will fail.
This can be overriden by running the command
"sysctl vm.mmap_min_addr=0" 
as root, or else only root can run the program.

xv6 also loads all the segments at the address 0x0, so mmap needs to be able to set the page
readable, writable and executable. As of this moment Linux allows this, so this
should just work.

The program also needs to be able to mmap some fixed address at SYSSTACK.
The system call handler will use that address as a stack.

The test folder contains binaries that were built from xv6 projects linked
above. The usertests program will fail because it tests some of
the kernel behavior, not just the system calls as a regular program will use it.
